{
  "name": "Controller",
  "class": "Marionette.Controller",
  "extends": [
    "Backbone.Events"
  ],
  "description": "<p>A Controller is a white-label Marionette Object. Its name can be a cause for\nconfusion, as it actually has nothing to do with the popular MVC architectural pattern.\nInstead, it&#39;s better to think of the Controller as a base object from which you can build.</p>\n<p>Controllers should be used when you have a task that you would like an object to be responsible for,\nbut none of the other Marionette Classes quite make sense to do it. It&#39;s a base object for you to use to\ncreate a new Class altogether.</p>\n",
  "examples": [
    {
      "name": "Basic Use",
      "example": "<p>A <code>Marionette.Controller</code> can be extended, like other\nBackbone and Marionette objects. It supports the standard\n<code>initialize</code> method, has a built-in <code>EventBinder</code>, and\ncan trigger events, itself.</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-comment\">// define a controller</span>\n<span class=\"hljs-keyword\">var</span> MyController = Marionette.Controller.extend({\n\n  initialize: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(options)</span></span>{\n    <span class=\"hljs-keyword\">this</span>.stuff = options.stuff;\n  },\n\n  doStuff: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span></span>{\n    <span class=\"hljs-keyword\">this</span>.trigger(<span class=\"hljs-string\">\"stuff:done\"</span>, <span class=\"hljs-keyword\">this</span>.stuff);\n  }\n});\n\n<span class=\"hljs-comment\">// use the built in EventBinder</span>\nc.listenTo(c, <span class=\"hljs-string\">\"stuff:done\"</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(stuff)</span></span>{\n  <span class=\"hljs-built_in\">console</span>.log(stuff);\n});\n\n<span class=\"hljs-comment\">// do some stuff</span>\nc.doStuff();\n</code></pre>\n"
    }
  ],
  "constructor": {
    "description": {
      "examples": [],
      "description": {
        "tags": [],
        "description": {
          "full": "<p>Creates a new Controller.</p>\n<p>The constructor function calls initialize if it exists, \nand sets the properties of the Controller.</p>\n",
          "summary": "<p>Creates a new Controller.</p>\n",
          "body": "<p>The constructor function calls initialize if it exists, \nand sets the properties of the Controller.</p>\n"
        },
        "isPrivate": false,
        "params": [],
        "paramStr": ""
      }
    },
    "examples": [
      {
        "name": "Basic Use",
        "example": "```js\nvar c = new MyController({\n  stuff: \"some stuff\"\n});\n```\n"
      }
    ]
  },
  "functions": {
    "initialize": {
      "description": {
        "tags": [
          {
            "type": "param",
            "types": [
              "...*"
            ],
            "name": "options",
            "description": "Options to be available on the Controller instance directly.",
            "optional": false,
            "typeStr": "...*"
          }
        ],
        "description": {
          "full": "<p>Initialize is called after a controller has been instantiated.</p>\n<p>The <code>options</code> parameter can take any key/value pair and set it on the Controller instance.</p>\n",
          "summary": "<p>Initialize is called after a controller has been instantiated.</p>\n",
          "body": "<p>The <code>options</code> parameter can take any key/value pair and set it on the Controller instance.</p>\n"
        },
        "isPrivate": false,
        "params": [
          {
            "type": "param",
            "types": [
              "...*"
            ],
            "name": "options",
            "description": "Options to be available on the Controller instance directly.",
            "optional": false,
            "typeStr": "...*"
          }
        ],
        "paramStr": "options"
      },
      "examples": [
        {
          "name": "Basic Use",
          "example": "<pre><code class=\"lang-js\"><span class=\"hljs-comment\">// define a controller</span>\n<span class=\"hljs-keyword\">var</span> MyController = Marionette.Controller.extend({\n\n  initialize: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(options)</span></span>{\n    <span class=\"hljs-keyword\">this</span>.stuff = options.stuff;\n  },\n\n  doStuff: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span></span>{\n    <span class=\"hljs-keyword\">this</span>.trigger(<span class=\"hljs-string\">\"stuff:done\"</span>, <span class=\"hljs-keyword\">this</span>.stuff);\n  }\n});\n</code></pre>\n"
        }
      ]
    },
    "destroy": {
      "description": {
        "tags": [],
        "description": {
          "full": "<p>Each Controller instance has a built in <code>destroy</code> method that handles\nunbinding all of the events that are directly attached to the controller\ninstance, as well as those that are bound using the EventBinder from\nthe controller.\nInvoking the <code>destroy</code> method will trigger the &quot;before:destroy&quot; and &quot;destroy&quot; events and the\ncorresponding <code>onBeforeDestroy</code> and <code>onDestroy</code> method calls. These calls will be passed any arguments <code>destroy</code>\nwas invoked with.</p>\n",
          "summary": "<p>Each Controller instance has a built in <code>destroy</code> method that handles\nunbinding all of the events that are directly attached to the controller\ninstance, as well as those that are bound using the EventBinder from\nthe controller.\nInvoking the <code>destroy</code> method will trigger the &quot;before:destroy&quot; and &quot;destroy&quot; events and the\ncorresponding <code>onBeforeDestroy</code> and <code>onDestroy</code> method calls. These calls will be passed any arguments <code>destroy</code>\nwas invoked with.</p>\n",
          "body": ""
        },
        "isPrivate": false,
        "params": [],
        "paramStr": ""
      },
      "examples": [
        {
          "name": "Basic Use",
          "example": "<pre><code class=\"lang-js\"><span class=\"hljs-comment\">// define a controller with an onDestroy method</span>\n<span class=\"hljs-keyword\">var</span> MyController = Marionette.Controller.extend({\n  onBeforeDestroy: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(arg1, arg2)</span></span>{\n    <span class=\"hljs-comment\">// put custom code here, before destroying this controller</span>\n  },\n  onDestroy: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(arg1, arg2)</span></span>{\n    <span class=\"hljs-comment\">// put custom code here, to destroy this controller</span>\n  }\n});\n\n<span class=\"hljs-comment\">// create a new controller instance</span>\n<span class=\"hljs-keyword\">var</span> contr = <span class=\"hljs-keyword\">new</span> MyController();\n\n<span class=\"hljs-comment\">// add some event handlers</span>\ncontr.on(<span class=\"hljs-string\">\"before:destroy\"</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(arg1, arg2)</span></span>{ ... });\ncontr.on(<span class=\"hljs-string\">\"destroy\"</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(arg1, arg2)</span></span>{ ... });\ncontr.listenTo(something, <span class=\"hljs-string\">\"bar\"</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span></span>{...});\n\n<span class=\"hljs-comment\">// destroy the controller: unbind all of the</span>\n<span class=\"hljs-comment\">// event handlers, trigger the \"destroy\" event and</span>\n<span class=\"hljs-comment\">// call the onDestroy method</span>\ncontr.destroy(arg1, arg2);\n</code></pre>\n"
        }
      ]
    }
  },
  "nav": {
    "files": [
      {
        "name": "application"
      },
      {
        "name": "behavior"
      },
      {
        "name": "collection-view"
      },
      {
        "name": "composite-view"
      },
      {
        "name": "controller"
      },
      {
        "name": "helpers"
      },
      {
        "name": "item-view"
      },
      {
        "name": "layout-view"
      },
      {
        "name": "region-manager"
      },
      {
        "name": "region"
      },
      {
        "name": "view"
      }
    ]
  }
}