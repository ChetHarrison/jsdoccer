{
  "name": "RegionManager",
  "class": "Marionette.RegionManager",
  "extends": [
    "Marionette.Controller"
  ],
  "description": "<p>RegionManagers provide a consistent way to manage a number of Marionette.Region objects within an application. The RegionManager is intended to be used by other objects, to facilitate the addition, storage, retrieval, and removal of regions from that object.</p>\n<p>Even if you&#39;re not using this class redirectly, it is already being used by Marionette.Application and Marionette.LayoutView.</p>\n",
  "constructor": {
    "description": {
      "examples": [],
      "description": {
        "tags": [],
        "description": {
          "full": "<p>RegionManagers can be instantiated directly and can optionally have default regions passed into the constructor.</p>\n",
          "summary": "<p>RegionManagers can be instantiated directly and can optionally have default regions passed into the constructor.</p>\n",
          "body": ""
        },
        "isPrivate": false,
        "params": [],
        "paramStr": ""
      }
    },
    "examples": [
      {
        "name": "Creating a RegionMananger with default regions",
        "example": "\n```js\nvar mananger = new Marionette.RegionManager({\n  regions: {\n    \"aRegion\": \"#bar\"\n  }\n})\n\nmananger.getRegion(\"aRegion\").show(new MyView);\n```\n"
      }
    ]
  },
  "functions": {
    "addRegion": {
      "description": {
        "tags": [
          {
            "type": "param",
            "types": [
              "String"
            ],
            "name": "name",
            "description": "The name of the region being added",
            "optional": false,
            "typeStr": "String"
          },
          {
            "type": "param",
            "types": [
              "Marionette.Region",
              "Function",
              "String",
              "Object"
            ],
            "name": "definition",
            "description": "Accepts a Marionette.Region instance, a Function that returns a Marionette.Region instance (such as a Region constructor), a selector, or an object definition for finer control",
            "optional": false,
            "typeStr": "Marionette.Region, Function, String, Object"
          }
        ],
        "description": {
          "full": "<p>Regions can be added individually using the <code>addRegion</code> method.</p>\n",
          "summary": "<p>Regions can be added individually using the <code>addRegion</code> method.</p>\n",
          "body": ""
        },
        "isPrivate": false,
        "params": [
          {
            "type": "param",
            "types": [
              "String"
            ],
            "name": "name",
            "description": "The name of the region being added",
            "optional": false,
            "typeStr": "String"
          },
          {
            "type": "param",
            "types": [
              "Marionette.Region",
              "Function",
              "String",
              "Object"
            ],
            "name": "definition",
            "description": "Accepts a Marionette.Region instance, a Function that returns a Marionette.Region instance (such as a Region constructor), a selector, or an object definition for finer control",
            "optional": false,
            "typeStr": "Marionette.Region, Function, String, Object"
          }
        ],
        "paramStr": "name, definition"
      },
      "examples": [
        {
          "name": "Adding a region",
          "example": "<p>A region named &quot;foo&quot; will be added to the RegionManager instance. It is defined as a jQuery selector that will search for the <code>#bar</code> element in the DOM.</p>\n<p>There are a lot of other ways to define a region, including object literals with various options, and instances of Region objects. For more information on this, see the Region documentation.</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> rm = <span class=\"hljs-keyword\">new</span> Marionette.RegionManager();\n\n<span class=\"hljs-keyword\">var</span> region = rm.addRegion(<span class=\"hljs-string\">\"foo\"</span>, <span class=\"hljs-string\">\"#bar\"</span>);\n</code></pre>\n"
        }
      ]
    },
    "addRegions": {
      "description": {
        "tags": [
          {
            "type": "param",
            "types": [
              "Object"
            ],
            "name": "name",
            "description": "Accepts an object literal or a function that returns an object literal. The object literal must contain region names as keys and region definitions as values. The return value is an object literal with all the created regions.",
            "optional": false,
            "typeStr": "Object"
          }
        ],
        "description": {
          "full": "<p>Regions can also be added en-masse through the use of the <code>addRegions</code> method. This method takes an object literal or a function that returns an object literal.</p>\n",
          "summary": "<p>Regions can also be added en-masse through the use of the <code>addRegions</code> method. This method takes an object literal or a function that returns an object literal.</p>\n",
          "body": ""
        },
        "isPrivate": false,
        "params": [
          {
            "type": "param",
            "types": [
              "Object"
            ],
            "name": "name",
            "description": "Accepts an object literal or a function that returns an object literal. The object literal must contain region names as keys and region definitions as values. The return value is an object literal with all the created regions.",
            "optional": false,
            "typeStr": "Object"
          }
        ],
        "paramStr": "name"
      },
      "examples": [
        {
          "name": "Adding multiple regions with a object literal or a function",
          "example": "<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> rm = <span class=\"hljs-keyword\">new</span> Marionette.RegionManager();\n\n<span class=\"hljs-comment\">// With an object literal</span>\n<span class=\"hljs-keyword\">var</span> regions = rm.addRegions({\n  main: <span class=\"hljs-string\">'#main-content'</span>,\n  navigation: {\n    selector: <span class=\"hljs-string\">'#navigation'</span>,\n    regionClass: MyNavRegion\n  }\n});\n\n<span class=\"hljs-comment\">// With a function</span>\n<span class=\"hljs-keyword\">var</span> otherRegions = rm.addRegions(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(regionDefinition)</span> </span>{\n  <span class=\"hljs-keyword\">return</span> {\n    footer: <span class=\"hljs-string\">'#footer'</span>\n  };\n});\n\nregions.getRegion(<span class=\"hljs-string\">\"main\"</span>);        <span class=\"hljs-comment\">//=&gt; 'main' region instance</span>\nregions.getRegion(<span class=\"hljs-string\">\"navigation\"</span>);  <span class=\"hljs-comment\">//=&gt; 'navigation' region instance</span>\notherRegions.getRegion(<span class=\"hljs-string\">\"footer\"</span>); <span class=\"hljs-comment\">//=&gt; 'footer' region instance</span>\n</code></pre>\n"
        },
        {
          "name": "Adding multiple regions with a function",
          "example": "<p>If you supply a function to <code>addRegions</code>, it will be called with the <code>RegionManager</code> instance context and all the arguments passed to <code>addRegions</code>.</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> rm = <span class=\"hljs-keyword\">new</span> Marionette.RegionManager();\n\n<span class=\"hljs-keyword\">var</span> regionDefaults = {\n  regionClass: MyRegionClass\n};\n\nrm.addRegions(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(regionDefinition, defaults)</span> </span>{\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">this</span>);             <span class=\"hljs-comment\">// `rm` instance of `RegionManager`</span>\n  <span class=\"hljs-built_in\">console</span>.log(regionDefinition); <span class=\"hljs-comment\">// the region definition function</span>\n  <span class=\"hljs-built_in\">console</span>.log(defaults);         <span class=\"hljs-comment\">// `{ regionClass: MyRegionClass }`</span>\n\n  <span class=\"hljs-comment\">// ...return the region definition object literal</span>\n}, regionDefaults);\n</code></pre>\n"
        },
        {
          "name": "Adding multiple regions with defaults",
          "example": "<p>When adding multiple regions it may be useful to provide a set of defaults that get applied to all of the regions being added. This can be done through the use of a <code>defaults</code> parameter. Specify this parameter as an object literal with <code>key: value</code> pairs that will be applied to every region added.</p>\n<p>In this example, all regions will be added as instances of <code>MyRegionClass</code>.</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> rm = <span class=\"hljs-keyword\">new</span> Marionette.RegionManager();\n\n<span class=\"hljs-keyword\">var</span> defaults = {\n  regionClass: MyRegionClass\n};\n\n<span class=\"hljs-keyword\">var</span> regions = {\n  foo: <span class=\"hljs-string\">\"#bar\"</span>,\n  baz: <span class=\"hljs-string\">\"#quux\"</span>\n};\n\nrm.addRegions(regions, defaults);\n</code></pre>\n"
        }
      ]
    },
    "get": {
      "description": {
        "tags": [
          {
            "type": "param",
            "types": [
              "String"
            ],
            "name": "name",
            "description": "The name of the region you're trying to get",
            "optional": false,
            "typeStr": "String"
          }
        ],
        "description": {
          "full": "<p>A region instance can be retrieved from the RegionManager instance using the <code>get</code> method and passing in the name of the region.</p>\n",
          "summary": "<p>A region instance can be retrieved from the RegionManager instance using the <code>get</code> method and passing in the name of the region.</p>\n",
          "body": ""
        },
        "isPrivate": false,
        "params": [
          {
            "type": "param",
            "types": [
              "String"
            ],
            "name": "name",
            "description": "The name of the region you're trying to get",
            "optional": false,
            "typeStr": "String"
          }
        ],
        "paramStr": "name"
      },
      "examples": [
        {
          "name": "Adding and then accessing a region",
          "example": "<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> rm = <span class=\"hljs-keyword\">new</span> Marionette.RegionManager();\nrm.addRegion(<span class=\"hljs-string\">\"foo\"</span>, <span class=\"hljs-string\">\"#bar\"</span>);\n\n<span class=\"hljs-keyword\">var</span> region = rm.get(<span class=\"hljs-string\">\"foo\"</span>);\n</code></pre>\n"
        }
      ]
    },
    "getRegions": {
      "description": {
        "tags": [],
        "description": {
          "full": "<p>Get all the regions from the RegionManager. Returns an object literal with named regions as attributes.</p>\n",
          "summary": "<p>Get all the regions from the RegionManager. Returns an object literal with named regions as attributes.</p>\n",
          "body": ""
        },
        "isPrivate": false,
        "params": [],
        "paramStr": ""
      },
      "examples": [
        {
          "name": "Getting all the regions",
          "example": "<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> rm = <span class=\"hljs-keyword\">new</span> Marionette.RegionManager();\nrm.addRegion(<span class=\"hljs-string\">\"foo\"</span>, <span class=\"hljs-string\">\"#foo\"</span>);\nrm.addRegion(<span class=\"hljs-string\">\"bar\"</span>, <span class=\"hljs-string\">\"#bar\"</span>);\n\n<span class=\"hljs-keyword\">var</span> regions = rm.getRegions();\n\nregions.getRegion(<span class=\"hljs-string\">\"foo\"</span>); <span class=\"hljs-comment\">//=&gt; foo region</span>\nregions.getRegion(<span class=\"hljs-string\">\"bar\"</span>); <span class=\"hljs-comment\">//=&gt; bar region</span>\n</code></pre>\n"
        }
      ]
    },
    "removeRegion": {
      "description": {
        "tags": [
          {
            "type": "param",
            "types": [
              "String"
            ],
            "name": "name",
            "description": "The name of the region you're trying to remove",
            "optional": false,
            "typeStr": "String"
          }
        ],
        "description": {
          "full": "<p>A region can be removed by calling the <code>removeRegion</code> method and passing in the name of the region. A region will have its <code>empty</code> and <code>stopListening</code> methods called before it is removed from the RegionManager instance.</p>\n",
          "summary": "<p>A region can be removed by calling the <code>removeRegion</code> method and passing in the name of the region. A region will have its <code>empty</code> and <code>stopListening</code> methods called before it is removed from the RegionManager instance.</p>\n",
          "body": ""
        },
        "isPrivate": false,
        "params": [
          {
            "type": "param",
            "types": [
              "String"
            ],
            "name": "name",
            "description": "The name of the region you're trying to remove",
            "optional": false,
            "typeStr": "String"
          }
        ],
        "paramStr": "name"
      },
      "examples": [
        {
          "name": "Removing a region",
          "example": "<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> rm = <span class=\"hljs-keyword\">new</span> Marionette.RegionManager();\nrm.addRegion(<span class=\"hljs-string\">\"foo\"</span>, <span class=\"hljs-string\">\"#bar\"</span>);\n\nrm.removeRegion(<span class=\"hljs-string\">\"foo\"</span>);\n</code></pre>\n"
        }
      ]
    },
    "removeRegions": {
      "description": {
        "tags": [],
        "description": {
          "full": "<p>Quickly remove all regions from the RegionManager instance.</p>\n",
          "summary": "<p>Quickly remove all regions from the RegionManager instance.</p>\n",
          "body": ""
        },
        "isPrivate": false,
        "params": [],
        "paramStr": ""
      },
      "examples": [
        {
          "name": "Removing all regions",
          "example": "<p>This will empty all regions, and remove them.</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> rm = <span class=\"hljs-keyword\">new</span> Marionette.RegionManager();\nrm.addRegions({\n  foo: <span class=\"hljs-string\">\"#foo\"</span>,\n  bar: <span class=\"hljs-string\">\"#bar\"</span>,\n  baz: <span class=\"hljs-string\">\"#baz\"</span>\n});\n\nrm.removeRegions();\n</code></pre>\n"
        }
      ]
    },
    "emptyRegions": {
      "description": {
        "tags": [],
        "description": {
          "full": "<p>Quickly empty all regions from the RegionManager instance while leaving them attached.</p>\n",
          "summary": "<p>Quickly empty all regions from the RegionManager instance while leaving them attached.</p>\n",
          "body": ""
        },
        "isPrivate": false,
        "params": [],
        "paramStr": ""
      },
      "examples": [
        {
          "name": "Emptying all regions",
          "example": "<p>This will empty all regions without removing them from the RegionManager instance.</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> rm = <span class=\"hljs-keyword\">new</span> Marionette.RegionManager();\nrm.addRegions({\n  foo: <span class=\"hljs-string\">\"#foo\"</span>,\n  bar: <span class=\"hljs-string\">\"#bar\"</span>,\n  baz: <span class=\"hljs-string\">\"#baz\"</span>\n});\n\nrm.emptyRegions();\n</code></pre>\n"
        }
      ]
    },
    "destroy": {
      "description": {
        "tags": [],
        "description": {
          "full": "<p>Destroy a RegionManager instance.</p>\n",
          "summary": "<p>Destroy a RegionManager instance.</p>\n",
          "body": ""
        },
        "isPrivate": false,
        "params": [],
        "paramStr": ""
      },
      "examples": [
        {
          "name": "Destroying and removing all regions from the RegionManager instance",
          "example": "<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> rm = <span class=\"hljs-keyword\">new</span> Marionette.RegionManager();\nrm.addRegions({\n  foo: <span class=\"hljs-string\">\"#foo\"</span>,\n  bar: <span class=\"hljs-string\">\"#bar\"</span>,\n  baz: <span class=\"hljs-string\">\"#baz\"</span>\n});\n\nrm.destroy();\n</code></pre>\n"
        }
      ]
    }
  },
  "events": [
    {
      "name": "before:add:region",
      "description": {
        "tags": [],
        "description": {
          "full": "<p>Triggered before a region is added to the RegionManager.</p>\n",
          "summary": "<p>Triggered before a region is added to the RegionManager.</p>\n",
          "body": ""
        },
        "isPrivate": false,
        "params": [],
        "paramStr": ""
      },
      "example": "```js\nvar rm = new Marionette.RegionManager();\n\nrm.on(\"before:add:region\", function(name, region){\n  // do something with the region instance\n});\n\nrm.addRegion(\"foo\", \"#bar\");\n```\n"
    },
    {
      "name": "add:region",
      "description": {
        "tags": [],
        "description": {
          "full": "<p>Triggered when a region is added to the RegionManager. This allows you to use the region instance immediately, or attach the region to an object that needs a reference to it.</p>\n",
          "summary": "<p>Triggered when a region is added to the RegionManager. This allows you to use the region instance immediately, or attach the region to an object that needs a reference to it.</p>\n",
          "body": ""
        },
        "isPrivate": false,
        "params": [],
        "paramStr": ""
      },
      "example": "```js\nvar rm = new Marionette.RegionManager();\n\nrm.on(\"add:region\", function(name, region){\n  // add the region instance to an object\n  myObject[name] = region;\n});\n\nrm.addRegion(\"foo\", \"#bar\");\n```\n"
    },
    {
      "name": "before:remove:region",
      "description": {
        "tags": [],
        "description": {
          "full": "<p>Triggered before a region is removed from the manager, so you can perform any cleanup opersations.</p>\n",
          "summary": "<p>Triggered before a region is removed from the manager, so you can perform any cleanup opersations.</p>\n",
          "body": ""
        },
        "isPrivate": false,
        "params": [],
        "paramStr": ""
      },
      "example": "```js\nvar rm = new Marionette.RegionManager();\n\nrm.on(\"before:remove:region\", function(name, region){\n  // do something with the region instance here\n});\n\nrm.addRegion(\"foo\", \"#bar\");\n\nrm.removeRegion(\"foo\");\n```\n"
    },
    {
      "name": "remove:region",
      "description": {
        "tags": [],
        "description": {
          "full": "<p>Triggered when a region is removed from the RegionManager. This allows you to use the region instance one last time, or remove the region from an object that has a reference to it.</p>\n",
          "summary": "<p>Triggered when a region is removed from the RegionManager. This allows you to use the region instance one last time, or remove the region from an object that has a reference to it.</p>\n",
          "body": ""
        },
        "isPrivate": false,
        "params": [],
        "paramStr": ""
      },
      "example": "```js\nvar rm = new Marionette.RegionManager();\n\nrm.on(\"remove:region\", function(name, region){\n  // remove the region instance from an object\n  delete myObject[name];\n});\n\nrm.addRegion(\"foo\", \"#bar\");\n\nrm.removeRegion(\"foo\");\n```\n"
    }
  ],
  "interators": "The RegionManager has several methods for iteration attached to it, from underscore.js. This works in the same way as the Backbone.Collection methods that have been imported. For example, you can easily iterate over the entire collection of region instances by calling the `each` method.\n\n```js\nvar rm = new Marionette.RegionManager();\n\nrm.each(function(region){\n  // do stuff w/ the region instance here\n});\n```\n\nThe list of underscore methods includes:\n- forEach\n- each\n- map\n- find\n- detect\n- filter\n- select\n- reject\n- every\n- all\n- some\n- any\n- include\n- contains\n- invoke\n- toArray\n- first\n- initial\n- rest\n- last\n- without\n- isEmpty\n- pluck\n",
  "nav": {
    "files": [
      {
        "name": "application"
      },
      {
        "name": "behavior"
      },
      {
        "name": "collection-view"
      },
      {
        "name": "composite-view"
      },
      {
        "name": "controller"
      },
      {
        "name": "helpers"
      },
      {
        "name": "item-view"
      },
      {
        "name": "layout-view"
      },
      {
        "name": "region-manager"
      },
      {
        "name": "region"
      },
      {
        "name": "view"
      }
    ]
  }
}